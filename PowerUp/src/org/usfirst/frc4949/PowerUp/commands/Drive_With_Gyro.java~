// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.PowerUp.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4949.PowerUp.Robot;

/**
 *
 */
public class Drive_With_Gyro extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Distance;
    private double m_Bearing;
    private double m_Speed;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double driveSpeed;
	private double distance;
	private double distanceMoved;
	private long startTimeMillis;
	private long currentTimeMillis;
	private double error;
	private double angle;
	private double course;
	private final double kP = 1.0;
	private final double kPivot = 0.03;
	private final double kSpeedConv = 0.25;// ***Change the value to our***
	public Drive_With_Gyro(){
		this((double) 100.0, (double)0.0, (double)0.0);
	}
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Drive_With_Gyro(double Distance, double Bearing, double Speed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Distance = Distance;
        m_Bearing = Bearing;
        m_Speed = Speed;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	startTimeMillis = System.currentTimeMillis(); 
    	distance = m_Distance;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	driveSpeed = m_Speed;
    	course = Robot.drive.getAngle();
        angle = course - m_Bearing;  // get current heading deviation

    	if (Robot.hasEncoders) {
    		error = (distance - Robot.drive.getrMEncoder_1());
    	} else {
        	currentTimeMillis = System.currentTimeMillis();
        	distanceMoved = (currentTimeMillis - startTimeMillis) * driveSpeed * kSpeedConv;
    		error = distance - distanceMoved;
    	}
    	double zRotation = angle * kSpeedConv;
    	zRotation = Math.max(-1, zRotation);
    	zRotation = Math.min(1, zRotation);
    	Robot.drive.arcDrive(driveSpeed, zRotation);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	if (error < 0){
    	return true; 
    	} else {
    	return false;	
    	}
        
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
