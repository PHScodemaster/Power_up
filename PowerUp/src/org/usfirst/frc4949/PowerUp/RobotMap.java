// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.PowerUp;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController intakeIntake_Control;
    public static SpeedController driveRMotor;
    public static SpeedController driveLMotor;
    public static DifferentialDrive driveDifferentialDrive1;
    public static Encoder driveRMEncoder_1;
    public static Encoder driveLMEncoder_2;
    public static SpeedController elevatorElevator_Control;
    public static SpeedController climbClimb_Control;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static ADXRS450_Gyro driveADXRS450_Gyro;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeIntake_Control = new Talon(4);
        LiveWindow.addActuator("Intake", "Intake_Control", (Talon) intakeIntake_Control);
        intakeIntake_Control.setInverted(false);
        driveRMotor = new Spark(0);
        LiveWindow.addActuator("Drive", "RMotor", (Spark) driveRMotor);
        driveRMotor.setInverted(false);
        driveLMotor = new Spark(1);
        LiveWindow.addActuator("Drive", "LMotor", (Spark) driveLMotor);
        driveLMotor.setInverted(false);
        driveDifferentialDrive1 = new DifferentialDrive(driveLMotor, driveRMotor);
        LiveWindow.addActuator("Drive", "Differential Drive 1", driveDifferentialDrive1);
        driveDifferentialDrive1.setSafetyEnabled(true);
        driveDifferentialDrive1.setExpiration(0.1);
        driveDifferentialDrive1.setMaxOutput(1.0);

        driveRMEncoder_1 = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "RMEncoder_1", driveRMEncoder_1);
        driveRMEncoder_1.setDistancePerPulse(1.0);
        driveRMEncoder_1.setPIDSourceType(PIDSourceType.kRate);
        driveLMEncoder_2 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "LMEncoder_2", driveLMEncoder_2);
        driveLMEncoder_2.setDistancePerPulse(1.0);
        driveLMEncoder_2.setPIDSourceType(PIDSourceType.kRate);
        elevatorElevator_Control = new Talon(3);
        LiveWindow.addActuator("Elevator", "Elevator_Control", (Talon) elevatorElevator_Control);
        elevatorElevator_Control.setInverted(false);
        climbClimb_Control = new Talon(2);
        LiveWindow.addActuator("Climb", "Climb_Control", (Talon) climbClimb_Control);
        climbClimb_Control.setInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveADXRS450_Gyro = new ADXRS450_Gyro();
        LiveWindow.addActuator("Gyro", "ADXRS450", driveADXRS450_Gyro);    
    }
}
